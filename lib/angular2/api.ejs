/* tslint:disable */
import { Injectable, Inject, Optional } from '@angular/core';
import { Http } from '@angular/http';

import { BaseLoopBackApi } from '../baseApi.service';
import { LoopBackConfig } from '../config.service';
import { LoopBackAuth } from '../auth.service';
import { ErrorHandler } from '../errorHandler.service';
import { LoopBackFilterInterface } from '../api.d';

/**
 * Api for the `<%-: modelName %>` model.
<% if ( meta.description ){ -%>
 *
 * **Details**
 *
 * <%-: meta.description | replace:/\n/gi, '\n * ' %>
<% } -%>
 */
@Injectable()
export class <%-: modelName %>Api extends BaseLoopBackApi {

  constructor(
    @Inject(Http) http: Http,
    @Inject(LoopBackAuth) protected auth: LoopBackAuth, 
    @Optional() @Inject(ErrorHandler) errorHandler: ErrorHandler
  ) {
    super(http, auth, errorHandler);
  }
<% meta.methods.forEach(function(action) {
 
  var methodName = action.name.split('.').join('$')
    .replace('prototype$', '')
    .replace(/::/g, '__');
-%>
<%   ngdocForMethod(modelName, methodName, action); -%>
<%
var params = action.accepts;
// Crunch for logout()
params = params.filter(function(arg) {
  return !(arg.arg === "access_token" && methodName === "logout");
});

var postData;
var urlParams = [];
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  postData = action.accepts.filter(function(arg) {
    return !(arg.http && (arg.http.source == 'query' || arg.http.source == 'path'))
      && !(arg.arg === "access_token" && methodName === "logout");
  });
}
-%>
  public <%-: methodName.split('__').map(function (value, index) {
                return index < 2 ? value : (value.charAt(0).toUpperCase() + value.slice(1));
              }).join('') %>(<%
    params.forEach(function(param, i, arr) {
      if ((param.http && param.http.source === 'path')
      // Crunch for "exists()" method
      || (param.arg === 'id' && methodName === 'exists')) {
        urlParams.push(param);
      }
      -%><%= param.arg %>: <% if (param.type === 'object') {
        %><%= param.arg === 'filter' ? 'LoopBackFilterInterface' : 'any' -%><%
      }
      else {
        %><%= param.type !== 'AccessToken' && !postData ? param.type : 'any' %><%
      }%>
<%    // Crunch for login() method
      if (!param.required && methodName === 'login' && param.arg === 'include') {
        %> = "user"<%
      }
      else {
        %><%= !param.required ? ' = undefined' : '' %><%
      } -%>
<%= (i < arr.length -1) ? ', ' : '' -%>
<%  }); //params.foreach
 -%>
) {
    let method: string = <%-: action.getHttpMethod() | q %>;

    let url: string = LoopBackConfig.getPath() + <%-: action.getFullPath() | q %>;
    let urlParams: any = {<%
  urlParams.forEach(function(param, i, arr) { %>
      <%= param.arg %>: <%= param.arg %><%= i < arr.length -1 ? ',' : '' %><%
  });%>
    };

    let params: any = {};<%
params.forEach(function(param, i, arr) {
  if (param.arg === 'filter'
  || (param.http && param.http.source === 'query')
  // Crunch for count()
  || (methodName === 'count' && param.arg === 'where')) { 
    %>
    if (<%= param.arg %> !== undefined) {
      params.<%= param.arg %> = <%= param.arg %>;
    }<%
  }
}); 
%>

    let result = this.request(method, url, urlParams, params<%= 
      postData && postData.length > 0 ? ", " + postData[0].arg : '' %>)<%
if (meta.isUser && methodName === 'login') { %>
      .share();
      result.subscribe(
        response => {
          this.auth.setUser(response.id, response.userId, response.user);
          this.auth.setRememberMe(true);
          this.auth.save();
        },
        () => null
      )<%
} else if (meta.isUser && methodName === 'logout') { %>
      .share();
      result.subscribe(
        () => {
          this.auth.clearUser();
          this.auth.clearStorage();
        },
        () => null
      )<% 
} %>;
    return result;
  }
<% }); // meta.methods.foreach -%>
<% if (meta.isUser) { -%>

  /**
   * @ngdoc method
   * @name <%- moduleName %>.<%- modelName %>#getCurrent
   * @methodOf <%- moduleName %>.<%- modelName %>
   *
   * @description
   *
   * Get data of the currently logged user. Fail with HTTP result 401
   * when there is no user logged in.
   *
   * @returns object An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   */
  public getCurrent(): any {
    let method: string = "GET";

    let url: string = LoopBackConfig.getPath() + <%-: meta.getPath() | q %> + "/:id";
    let id: any = this.auth.getCurrentUserId();
    if (id == null) {
      id = '__anonymous__';
    }
    let urlParams: any = {
      id: id
    };

    let result = this.request(method, url, urlParams)
      .share();
    result.subscribe(
      response => {
        this.auth.setCurrentUserData(response);
        return response.resource;
      },
      () => null
    );
    return result;
  }
<% } -%>

<% if (meta.isUser) { -%>
  /**
   * Get data of the currently logged user that was returned by the last
   * call to {@link <%- moduleName %>.<%- modelName %>#login} or
   * {@link <%- moduleName %>.<%- modelName %>#getCurrent}. Return null when there
   * is no user logged in or the data of the current user were not fetched
   * yet.
   *
   * @returns object A <%- modelName %> instance.
   */
  public getCachedCurrent() {
    return this.auth.getCurrentUserData();
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#isAuthenticated
   *
   * @returns {boolean} True if the current user is authenticated (logged in).
   */
  public isAuthenticated() {
    return this.getCurrentId() != null;
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#getCurrentId
   *
   * @returns object Id of the currently logged-in user or null.
   */
  public getCurrentId() {
    return this.auth.getCurrentUserId();
  }
<% } -%>

  /**
   * The name of the model represented by this $resource,
   * i.e. `<%- modelName %>`.
   */
  public getModelName() {
    return <%-: modelName | q %>;
  }
}

<%
function getJsDocType(arg) {
  return arg.type;
}

function ngdocForMethod(modelName, methodName, action, responseModelName) {
   // always add an empty line before the ngdoc comment:
-%>

  /**
<% if (action.deprecated) { -%>
   * @deprecated <%- action.deprecated %>
<% } -%>
<% if (!action.description) {
action.description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
   * <%-: action.description | replace:/\n/g, '\n         * ' %>
<%
var params = action.accepts;
var postData;
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  params = params.filter(function(arg) {
    return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
  });
  postData = action.accepts.filter(function(arg) {
    return params.indexOf(arg) == -1;
  });
}
-%>
<% if (params.length != 0) {
  params.forEach(function(arg) { -%>
   *
   * @param <%- getJsDocType(arg)  %> <%- arg.arg %> <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   if (meta.isUser && methodName === 'login' && arg.arg === 'include') { -%>
   *   Default value: `user`.
<%   } -%>
<% }); } -%>
<% if (meta.isUser && methodName === 'login') { -%>
   *
   *  - `rememberMe` - `boolean` - Whether the authentication credentials
   *     should be remembered in localStorage across app/browser restarts.
   *     Default: `true`.
<% } -%>
<% if (postData) { -%>
   *
   * @param object data Request data.
<% if (postData.length == 0) { -%>
   *
   * This method does not accept any data. Supply an empty object.
<% } else if (postData.length == 1 && postData[0].http &&
      postData[0].http.source == 'body') { -%>
   *
   * This method expects a subset of model properties as request parameters.
<% } else {
postData.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
  }
} -%>
   *
<% var returnType = action.isReturningArray() ? 'object[]': 'object'; -%>
   * @returns <%- returnType %> An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   *
<% if (!action.returns || action.returns.length == 0) { -%>
   * This method returns no data.
<% } else if (action.returns[0].root) { -%>
<%   if (action.returns[0].description) { -%>
   * <%- action.returns[0].description
.replace(/\n/g, '\n   * ').trimRight() %>
<%   } else { -%>
   * <em>
   * (The remote method definition does not provide any description.
   * This usually means the response is a `<%- responseModelName || modelName %>` object.)
   * </em>
<%   } -%>
<% } else { -%>
   * Data properties:
<%   action.returns.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
   */
<% } // end of ngdocForMethod -%>