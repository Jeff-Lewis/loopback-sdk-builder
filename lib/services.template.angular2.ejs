import {Injectable} from 'angular2/core';
import {Http, Request} from 'angular2/http';
import 'rxjs/add/operator/map';

export interface LoopBackFilterInterface {
  fields?: any;
  include?: any;
  limit?: any;
  order?: any;
  skip?: any;
  offset?: any;
  where?: any;
}

interface RequestParamsInterface {
  method: string;
  url: string;
}


class LoopBackAuth {
  protected accessTokenId: any;
  protected currentUserId: any;
  protected rememberMe: boolean;
  protected currentUserData: any;

  protected propsPrefix: string = '$LoopBack$';

  constructor() {
    this.accessTokenId = this.load("accessTokenId");
    this.currentUserId = this.load("currentUserId");
    this.rememberMe = this.load("rememberMe");
    this.currentUserData = null;
  }

  public setRememberMe(value: boolean): LoopBackAuth {
    this.rememberMe = value;
    return this;
  }

  public getCurrentUserId(): any {
    return this.currentUserId;
  }

  public setCurrentUserData(data: any): LoopBackAuth {
    this.currentUserData = data;
    return this;
  }

  public getCurrentUserData(): any {
    return this.currentUserData;
  }

  public save() {
    var storage = this.rememberMe ? localStorage : sessionStorage;
    this.saveThis(storage, "accessTokenId", this.accessTokenId);
    this.saveThis(storage, "currentUserId", this.currentUserId);
    this.saveThis(storage, "rememberMe", this.rememberMe);
  };

  public setUser(accessTokenId: any, userId: any, userData: any) {
    this.accessTokenId = accessTokenId;
    this.currentUserId = userId;
    this.currentUserData = userData;
  }

  public clearUser() {
    this.accessTokenId = null;
    this.currentUserId = null;
    this.currentUserData = null;
  }

  public clearStorage() {
    this.saveThis(sessionStorage, "accessTokenId", null);
    this.saveThis(localStorage, "accessTokenId", null);
    this.saveThis(sessionStorage, "currentUserId", null);
    this.saveThis(localStorage, "currentUserId", null);
    this.saveThis(sessionStorage, "rememberMe", null);
    this.saveThis(localStorage, "rememberMe", null);
  };

  // Note: LocalStorage converts the value to string
  // We are using empty string as a marker for null/undefined values.
  protected saveThis(storage: any, name: string, value: any) {
    try {
      var key = this.propsPrefix + name;
      if (value == null) {
        value = '';
      }
      storage[key] = value;
    }
    catch(err) {
      console.log('Cannot access local/session storage:', err);
    }
  }

  protected load(name: string): any {
    var key = this.propsPrefix + name;
    return localStorage[key] || sessionStorage[key] || null;
  }
}

let auth = new LoopBackAuth();

@Injectable()
export abstract class BaseLoopBackApi {

  protected path: string;

  constructor(protected http: Http) {
    this.init();
  }

  /**
   * Get path for building part of URL for API
   * @return string
   */
  protected getPath(): string {
    return this.path;
  }

  protected init() {
    this.path = <%-: urlBase | q %>;
  }

  /**
   * Process request
   * @param params
   */
  public request(requestParams: RequestParamsInterface, urlParams: any = null, 
                 filter: any = null, data: any = null) {
    return new Promise((resolve, reject) => {
      let url = requestParams.url;
      let key: string;
      for (key in urlParams) {
        url.replace(new RegExp(":" + key + "(\/|$)", "g"), urlParams[key] + "$1");
      }
      if (filter) {
        url += '?filter=' + JSON.stringify(filter);
      }

      let request = new Request({
        method: requestParams.method,
        url: url,
        body: data
      });

      this.http.request(request)
        .map(res => res.json())
        .subscribe(res => {
          if (res.error) {
            reject(res.error);
          }
          else {
            resolve(res);
          }
        });
    });
  }

}


<% for (var modelName in models) {
  var meta = models[modelName];
  // capitalize the model name
  modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
/**
 * Api for the `<%-: modelName %>` model.
<% if ( meta.description ){ -%>
 *
 * **Details**
 *
 * <%-: meta.description | replace:/\n/gi, '\n * ' %>
<% } -%>
 */
@Injectable()
export class <%-: modelName %>Api extends BaseLoopBackApi {

  constructor(http: Http) {
    super(http);
  }

<% meta.methods.forEach(function(action) {
  var methodName = action.name.split('.').join('$');
-%>
<%   ngdocForMethod(modelName, methodName, action); -%>
<%
var params = action.accepts;
var postData;
var urlParams = [];
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  postData = action.accepts.filter(function(arg) {
    return arg.http && (arg.http.source == 'body');
  });
}
-%>
  public <%-: methodName %>(<%
    params.forEach(function(param, i, arr) {
      if ((param.http && param.http.source === 'path')
      // Crunch for "exists()" method
      || (param.arg === 'id' && methodName === 'exists')) {
        urlParams.push(param);
      }
      -%><%= param.arg %>: <% if (param.type === 'object') {
        %><%= param.arg === 'filter' ? 'LoopBackFilterInterface' : 'any' -%><%
      }
      else {
        %><%= param.type !== 'AccessToken' ? param.type : 'any' %><%
      }%>
<% // Crunch for login() method
if (!param.required && methodName === 'login' && param.arg === 'include') {
 %> = "user"<%
}
else {
  %><%= !param.required ? ' = null' : '' %><%
} -%>
<%= (i < arr.length -1) ? ', ' : '' -%>
<%   }); //params.foreach
 -%>
) {
    let filterParams: any;<% 
params.forEach(function(param, i, arr) {
  if (param.arg === 'filter') { %>
    filterParams = <%= param.arg %>;<%
  }
  else if (param.http && param.http.source === 'query') { %>
    filterParams = {
      <%= param.arg %>: <%= param.arg %>
    };<%
  }
}); %>

    let urlParams: any = {<%
  urlParams.forEach(function(param, i, arr) { %>
      <%= param.arg %>: <%= param.arg %><%= i < arr.length -1 ? ',' : '' %><%
  });%>
    };

    let self = this;
    let requestParams: RequestParamsInterface = {
      url: self.getPath() + <%-: action.getFullPath() | q %>,
      method: <%-: action.getHttpMethod() | q %>
    };

    return this.request(requestParams, urlParams, filterParams<%= postData && postData.length > 0 ? ", " + postData[0].arg : '' %>)<%
if (meta.isUser && methodName === 'login') { %>
      .then(function(response: any) {
        var accessToken = response.data;
        auth.setUser(accessToken.id, accessToken.userId, accessToken.user);
        auth.setRememberMe(response.config.params.rememberMe !== false);
        auth.save();
        return response.resource;
      })<%
} else if (meta.isUser && methodName === 'logout') { %>
      .then(function(response: any) {
        auth.clearUser();
        auth.clearStorage();
        return response.resource;
      })<% 
} %>;
  }
<% }); // meta.methods.foreach -%>
<% if (meta.isUser) { -%>

  /**
   * @ngdoc method
   * @name <%- moduleName %>.<%- modelName %>#getCurrent
   * @methodOf <%- moduleName %>.<%- modelName %>
   *
   * @description
   *
   * Get data of the currently logged user. Fail with HTTP result 401
   * when there is no user logged in.
   *
   * @param {function(Object,Object)=} successCb
   *    Success callback with two arguments: `value`, `responseHeaders`.
   *
   * @param {function(Object)=} errorCb Error callback with one argument:
   *    `httpResponse`.
   *
   * @returns {Object} An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   */
  public getCurrent(): any {
    let self = this;
    let requestParams = {
      url: self.getPath() + <%-: meta.getPath() | q %> + "/:id",
      method: "GET",
      params: {
        id: function() {
          var id = auth.getCurrentUserId();
          if (id == null) id = '__anonymous__';
          return id;
        },
      },
      interceptor: {
        response: function(response: any) {
          auth.setCurrentUserData(response.data);
          return response.resource;
        }
      },
      __isGetCurrentUser__: true
    };
    return this.request(requestParams);
  }
<% } -%>

<% if (meta.isUser) { -%>
  /**
   * Get data of the currently logged user that was returned by the last
   * call to {@link <%- moduleName %>.<%- modelName %>#login} or
   * {@link <%- moduleName %>.<%- modelName %>#getCurrent}. Return null when there
   * is no user logged in or the data of the current user were not fetched
   * yet.
   *
   * @returns {Object} A <%- modelName %> instance.
   */
  public getCachedCurrent() {
    var data = auth.getCurrentUserData();
    return data ? new <%-: modelName %>Api(data) : null;
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#isAuthenticated
   *
   * @returns {boolean} True if the current user is authenticated (logged in).
   */
  public isAuthenticated() {
    return this.getCurrentId() != null;
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#getCurrentId
   *
   * @returns {Object} Id of the currently logged-in user or null.
   */
  public getCurrentId() {
    return auth.getCurrentUserId();
  }
<% } -%>

  /**
   * The name of the model represented by this $resource,
   * i.e. `<%- modelName %>`.
   */
  public getModelName() {
    return <%-: modelName | q %>;
  }
}


<% for (var scopeName in meta.scopes) {
      var scope = meta.scopes[scopeName];
      if (!scope) continue;
      var scopeMethods = scope.methods;
      // Angular names always start with a capital letter
      var targetClass = scope.targetClass[0].toUpperCase() + scope.targetClass.slice(1);

      if (Object.keys(scopeMethods).length > 1) {
-%>
    /**
     * @ngdoc object
     * @name <%-: moduleName %>.<%- modelName %>.<%- scopeName %>
     * @header <%-: moduleName %>.<%- modelName %>.<%- scopeName %>
     * @object
     * @description
     *
     * The object `<%- modelName %>.<%- scopeName %>` groups methods
     * manipulating `<%- targetClass %>` instances related to `<%- modelName %>`.
     *
     * Call {@link <%-: moduleName %>.<%- modelName %>#<%- scopeName %> <%- modelName %>.<%- scopeName %>()}
     * to query all related instances.
     */

<%
      }

      // sort the names to make sure the get method creating the scope
      // is emitted first (R.categories before R.categories.create)
      Object.keys(scopeMethods).sort().forEach(function(methodName) {
        var action = scopeMethods[methodName];

        // modelName is e.g. 'User'
        // methodName is e.g. 'accessTokens.create'
        // we need to convert it to 'User.accessTokens' and 'create'
        var names = methodName.split('.');
        var ngMethod = names.pop();
        var ngClass = [modelName].concat(names).join('.');

        ngdocForMethod(ngClass, ngMethod, action, targetClass);
-%>
        R.<%- methodName %> = function() {
          var TargetResource = $injector.get(<%-: targetClass | q %>);
          var action = TargetResource[<%-: action.name | q %>];
          return action.apply(R, arguments);
        };
<%    }); // forEach methods name -%>
<% } // for each scope -%>


<% } // for modelName in models -%>

<%
function getJsDocType(arg) {
  var type = arg.type == 'any' ? '*' : arg.type;
  if (!arg.required) type += '=';
  return type;
}

function ngdocForMethod(modelName, methodName, action, responseModelName) {
   // always add an empty line before the ngdoc comment:
-%>

<%
  if (action.internal) {
-%>
  // INTERNAL. <%- action.internal %>
<%
    return;
  }
-%>
  /**
<% if (action.deprecated) { -%>
   * @deprecated <%- action.deprecated %>
<% } -%>
<% if (!action.description) {
action.description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
   * <%-: action.description | replace:/\n/g, '\n         * ' %>
   *
<%
var params = action.accepts;
var postData;
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  params = params.filter(function(arg) {
    return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
  });
  postData = action.accepts.filter(function(arg) {
    return params.indexOf(arg) == -1;
  });
}
-%>
   * @param {Object=} parameters Request parameters.
<% if (params.length == 0) { -%>
   *
   *   This method does not accept any parameters.
   *   Supply an empty object or omit this argument altogether.
<% } else { params.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   if (meta.isUser && methodName === 'login' && arg.arg === 'include') { -%>
   *   Default value: `user`.
<%   } -%>
<% }); } -%>
<% if (meta.isUser && methodName === 'login') { -%>
   *
   *  - `rememberMe` - `boolean` - Whether the authentication credentials
   *     should be remembered in localStorage across app/browser restarts.
   *     Default: `true`.
<% } -%>
<% if (postData) { -%>
   *
   * @param {Object} postData Request data.
<% if (postData.length == 0) { -%>
   *
   * This method does not accept any data. Supply an empty object.
<% } else if (postData.length == 1 && postData[0].http &&
      postData[0].http.source == 'body') { -%>
   *
   * This method expects a subset of model properties as request parameters.
<% } else {
postData.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
  }
} -%>
   *
<% var returnType = action.isReturningArray() ? 'Array.<Object>': 'Object'; -%>
   * @param {function(<%- returnType %>,Object)=} successCb
   *   Success callback with two arguments: `value`, `responseHeaders`.
   *
   * @param {function(Object)=} errorCb Error callback with one argument:
   *   `httpResponse`.
   *
   * @returns {<%- returnType %>} An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   *
<% if (!action.returns || action.returns.length == 0) { -%>
   * This method returns no data.
<% } else if (action.returns[0].root) { -%>
<%   if (action.returns[0].description) { -%>
   * <%- action.returns[0].description
.replace(/\n/g, '\n   * ').trimRight() %>
<%   } else { -%>
   * <em>
   * (The remote method definition does not provide any description.
   * This usually means the response is a `<%- responseModelName || modelName %>` object.)
   * </em>
<%   } -%>
<% } else { -%>
   * Data properties:
<%   action.returns.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
   */
<% } // end of ngdocForMethod -%>

