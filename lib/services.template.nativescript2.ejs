/**
* @module LoopBack SDK for NativeScript
* @author Jonathan Casarrubias <http://twitter.com/johncasarrubias>
* @description
* This module provide 2 types of communication with a LoopBack API
*
* 1.- Standard RESTful Communication.- HTTP Requests implementing 
*     methods like POST, PUT, GET, DELETE
* 
*     Example: Room.create({});  <-- Creates a new room using REST
*
* 2.- SocketIO Communication (PubSub).- WebSocket Communication for
*     publish subscriptions. 
*
*     Example: Room.onCreate().subscribe(); <-- Listen for new rooms
*     using web sockets.
*
* NOTE: Currently Socket Communication is only supported for Android 
* IOS will be added ASAP
*
* NativeScript App_Resources Setup
*
* Make sure you update your App_Resources/Android/app.gradle file by adding
*
* dependencies {
*   compile ('io.socket:socket.io-client:0.7.0') {
*     exclude group: 'org.json', module: 'json'
*   }
* }
**/
/* tslint:disable */
import { Injectable, Inject, Optional } from '@angular/core';
import { Http, Headers, Request, Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/share';
import * as AppSettings from 'application-settings';

export interface LoopBackFilterInterface {
  fields?: any;
  include?: any;
  limit?: any;
  order?: any;
  skip?: any;
  offset?: any;
  where?: any;
}

var SocketIO = require('nativescript-socket.io');

class SocketConnections {
  private static connections = {};
  static getHandler(url, token: { id: any, userId: any }) {
    if (!SocketConnections.connections[url])
    SocketConnections.connections[url] = SocketIO.connect(url, {
        log: false,
        secure: false,
        forceWebsockets: true,
    });
    SocketConnections.connections[url].on('connect', () => {
      console.log('Connected, trying to authenticate');
      SocketConnections.connections[url].emit('authentication', token);
      SocketConnections.connections[url].on('unauthorized', res => console.error('Unauthenticated', res));
    });
    return SocketConnections.connections[url];
  }
}

export class LoopBackConfig {
  private static path: string;
  private static  version: string |Â number;

  public static setApiVersion(version: string = "api"): void {
    LoopBackConfig.version = version;
  }
  
  public static getApiVersion(): string | number {
    return LoopBackConfig.version;
  }

  public static setBaseURL(url: string = "/"): void {
    LoopBackConfig.path = url;
  }
  
  public static getPath(): string {
    return LoopBackConfig.path;
  }
}

class LoopBackAuth {
  protected accessTokenId: any;
  protected currentUserId: any;
  protected rememberMe: boolean;
  protected currentUserData: any;

  protected propsPrefix: string = '$LoopBack$';

  constructor() {
    this.accessTokenId = this.load("accessTokenId");
    this.currentUserId = this.load("currentUserId");
    this.rememberMe = this.load("rememberMe");
    this.currentUserData = null;
  }

  public setRememberMe(value: boolean): LoopBackAuth {
    this.rememberMe = value;
    return this;
  }

  public getCurrentUserId(): any {
    return this.currentUserId;
  }

  public setCurrentUserData(data: any): LoopBackAuth {
    this.currentUserData = data;
    return this;
  }

  public getCurrentUserData(): any {
    return this.currentUserData;
  }

  public getAccessTokenId(): any {
    return this.accessTokenId;
  }

  public save() {
    this.saveThis("accessTokenId", this.accessTokenId);
    this.saveThis("currentUserId", this.currentUserId);
    this.saveThis("rememberMe", this.rememberMe);
  };

  public setUser(accessTokenId: any, userId: any, userData: any) {
    this.accessTokenId = accessTokenId;
    this.currentUserId = userId;
    this.currentUserData = userData;
  }

  public clearUser() {
    this.accessTokenId = null;
    this.currentUserId = null;
    this.currentUserData = null;
  }

  public clearStorage() {
    this.saveThis("accessTokenId", null);
    this.saveThis("accessTokenId", null);
    this.saveThis("currentUserId", null);
    this.saveThis("currentUserId", null);
    this.saveThis("rememberMe", null);
    this.saveThis("rememberMe", null);
  };

  // Note: LocalStorage converts the value to string
  // We are using empty string as a marker for null/undefined values.
  protected saveThis(name: string, value: any) {
    try {
      var key = this.propsPrefix + name;
      if (value == null) {
        value = '';
      }
      AppSettings.setString(key, String(value));
    }
    catch(err) {
      console.log('Cannot access local/session storage:', err);
    }
  }

  protected load(name: string): any {
    var key = this.propsPrefix + name;
    return AppSettings.getString(key);
  }
}

let auth = new LoopBackAuth();


/**
 * Default error handler
 */
export class ErrorHandler {
  public handleError(error: Response) {
    return Observable.throw(error.json().error || 'Server error');
  }
}

@Injectable()
export abstract class BaseLoopBackApi {

  constructor(
    @Inject(Http) protected http: Http, 
    @Optional() @Inject(ErrorHandler) protected errorHandler: ErrorHandler
  ) {
    if (!errorHandler) {
      this.errorHandler = new ErrorHandler();
    }
    this.init();
  }

  protected init() {
    LoopBackConfig.setBaseURL("/");
  }

   /**
   * Process request
   * @param string  method    Request method (GET, POST, PUT)
   * @param string  url       Request url (my-host/my-url/:id)
   * @param any     urlParams Values of url parameters
   * @param any     params    Parameters for building url (filter and other)
   * @param any     data      Request body
   * @param boolean isio      Request socket connection
   */
  public request(method: string, url: string, urlParams: any = {},
    params: any = {}, data: any = null, isio: boolean = false) {
    let headers = new Headers();
    headers.append('Content-Type', 'application/json');

    if (auth.getAccessTokenId()) {
      headers.append('Authorization', auth.getAccessTokenId());
    }

    let requestUrl = url;
    let key: string;
    for (key in urlParams) {
      requestUrl = requestUrl.replace(new RegExp(":" + key + "(\/|$)", "g"), urlParams[key] + "$1");
    }

    let parameters: string[] = [];
    for (var param in params) {
      parameters.push(param + '=' + (typeof params[param] === 'object' ? JSON.stringify(params[param]) : params[param]));
    }
    requestUrl += (parameters ? '?' : '') + parameters.join('&');

    if (isio) {
      let event = (`[${method}]${requestUrl}`).replace(/\?/, '');
      let subject = new Subject();
      let socket = SocketConnections.getHandler(LoopBackConfig.getPath(), {
        id: auth.getAccessTokenId(),
        userId: auth.getCurrentUserId()
      });
          socket.on(event, res => subject.next(res));
      return subject.asObservable();
    } else {
      let request = new Request({
        headers: headers,
        method: method,
        url: requestUrl,
        body: data ? JSON.stringify(data) : undefined
      });
      return this.http.request(request)
        .map(res => (res.text() != "" ? res.json() : {}))
        .catch(this.errorHandler.handleError);
    }
  }
}

<% for (var modelName in models) {
  var meta = models[modelName];
  // capitalize the model name
  modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
/**
 * Api for the `<%-: modelName %>` model.
<% if ( meta.description ){ -%>
 *
 * **Details**
 *
 * <%-: meta.description | replace:/\n/gi, '\n * ' %>
<% } -%>
 */
@Injectable()
export class <%-: modelName %>Api extends BaseLoopBackApi {

  constructor(
    @Inject(Http) http: Http,
    @Optional() @Inject(ErrorHandler) errorHandler: ErrorHandler
  ) {
    super(http, errorHandler);
  }
<% meta.methods.forEach(function(action) {
 
  var methodName = action.name.split('.').join('$')
    .replace('prototype$', '')
    .replace(/::/g, '__');
-%>
<%   ngdocForMethod(modelName, methodName, action); -%>
<%
var params = action.accepts;
// Crunch for logout()
params = params.filter(function(arg) {
  return !(arg.arg === "access_token" && methodName === "logout");
});

var postData;
var urlParams = [];
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  postData = action.accepts.filter(function(arg) {
    return !(arg.http && (arg.http.source == 'query' || arg.http.source == 'path'))
      && !(arg.arg === "access_token" && methodName === "logout");
  });
}
-%>
  public <%-: methodName %>(<%
    params.forEach(function(param, i, arr) {
      if ((param.http && param.http.source === 'path')
      // Crunch for "exists()" method
      || (param.arg === 'id' && methodName === 'exists')) {
        urlParams.push(param);
      }
      -%><%= param.arg %>: <% if (param.type === 'object') {
        %><%= param.arg === 'filter' ? 'LoopBackFilterInterface' : 'any' -%><%
      }
      else {
        %><%= param.type !== 'AccessToken' && !postData ? param.type : 'any' %><%
      }%>
<%    // Crunch for login() method
      if (!param.required && methodName === 'login' && param.arg === 'include') {
        %> = "user"<%
      }
      else {
        %><%= !param.required ? ' = undefined' : '' %><%
      } -%>
<%= (i < arr.length -1) ? ', ' : '' -%>
<%  }); //params.foreach
 -%>
) {
    let method: string = <%-: action.getHttpMethod() | q %>;

    let url: string = LoopBackConfig.getPath() + "/" + LoopBackConfig.getApiVersion() + <%-: action.getFullPath() | q %>;
    let urlParams: any = {<%
  urlParams.forEach(function(param, i, arr) { %>
      <%= param.arg %>: <%= param.arg %><%= i < arr.length -1 ? ',' : '' %><%
  });%>
    };

    let params: any = {};<%
params.forEach(function(param, i, arr) {
  if (param.arg === 'filter'
  || (param.http && param.http.source === 'query')
  // Crunch for count()
  || (methodName === 'count' && param.arg === 'where')) { 
    %>
    if (<%= param.arg %> !== undefined) {
      params.<%= param.arg %> = <%= param.arg %>;
    }<%
  }
}); 
%>

<% if (meta.isUser && methodName === 'login') { %>
    this.logout();
<% } %>

    let result = this.request(method, url, urlParams, params<%= 
      postData && postData.length > 0 ? ", " + postData[0].arg : '' %>)<%
if (meta.isUser && methodName === 'login') { %>
      .share();
      result.subscribe(
        (response: { id: string, userId: string, user: any }) => {
          auth.setUser(response.id, response.userId, response.user);
          auth.setRememberMe(true);
          auth.save();
        },
        () => null
      )<%
} else if (meta.isUser && methodName === 'logout') { %>
      .share();
      result.subscribe(
        () => {
          auth.clearUser();
          auth.clearStorage();
        },
        () => null
      )<% 
} %>;
    return result;
  }

  public on<%-: methodName.split('__').map(function (value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }).join('') %>(<%
    params.forEach(function(param, i, arr) {
      if ((param.http && param.http.source === 'path')
      // Crunch for "exists()" method
      || (param.arg === 'id' && methodName === 'exists')) {
        //urlParams.push(param);
      }
      -%><%= param.arg %>: <% if (param.type === 'object') {
        %><%= param.arg === 'filter' ? 'LoopBackFilterInterface' : 'any' -%><%
      }
      else {
        %><%= param.type !== 'AccessToken' && !postData ? param.type : 'any' %><%
      }%>
<%    // Crunch for login() method
      if (!param.required && methodName === 'login' && param.arg === 'include') {
        %> = "user"<%
      }
      else {
        %><%= !param.required ? ' = undefined' : '' %><%
      } -%>
<%= (i < arr.length -1) ? ', ' : '' -%>
<%  }); //params.foreach
 -%>
) {
    let method: string = <%-: action.getHttpMethod() | q %>;
    let url: string = "/" + LoopBackConfig.getApiVersion() + <%-: action.getFullPath() | q %>;
    let urlParams: any = {<%
  urlParams.forEach(function(param, i, arr) { %>
      <%= param.arg %>: <%= param.arg %><%= i < arr.length -1 ? ',' : '' %><%
  });%>
    };

    let params: any = {};<%
params.forEach(function(param, i, arr) {
  if (param.arg === 'filter'
  || (param.http && param.http.source === 'query')
  // Crunch for count()
  || (methodName === 'count' && param.arg === 'where')) { 
    %>
    if (<%= param.arg %> !== undefined) {
      params.<%= param.arg %> = <%= param.arg %>;
    }<%
  }
}); 
%>
    let result = this.request(method, url, urlParams, params<%= 
      postData && postData.length > 0 ? ", " + postData[0].arg : '' %>, true)<%
if (meta.isUser && methodName === 'login') { %>
      .share();
      result.subscribe(
        (response: { id: string, userId: string, user: any }) => {
          auth.setUser(response.id, response.userId, response.user);
          auth.setRememberMe(true);
          auth.save();
        },
        () => null
      )<%
} else if (meta.isUser && methodName === 'logout') { %>
      .share();
      result.subscribe(
        () => {
          auth.clearUser();
          auth.clearStorage();
        },
        () => null
      )<% 
} %>;
    return result;
  }
<% }); // meta.methods.foreach -%>
<% if (meta.isUser) { -%>

  /**
   * @ngdoc method
   * @name <%- moduleName %>.<%- modelName %>#getCurrent
   * @methodOf <%- moduleName %>.<%- modelName %>
   *
   * @description
   *
   * Get data of the currently logged user. Fail with HTTP result 401
   * when there is no user logged in.
   *
   * @returns object An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   */
  public getCurrent(): any {
    let method: string = "GET";

    let url: string = LoopBackConfig.getPath() + <%-: meta.getPath() | q %> + "/:id";
    let id: any = auth.getCurrentUserId();
    if (id == null) {
      id = '__anonymous__';
    }
    let urlParams: any = {
      id: id
    };

    let result = this.request(method, url, urlParams)
      .share();
      result.subscribe(
        (response: { resource: any }) => {
          auth.setCurrentUserData(response);
          return response.resource;
        },
        () => null
      );
    return result;
  }
<% } -%>

<% if (meta.isUser) { -%>
  /**
   * Get data of the currently logged user that was returned by the last
   * call to {@link <%- moduleName %>.<%- modelName %>#login} or
   * {@link <%- moduleName %>.<%- modelName %>#getCurrent}. Return null when there
   * is no user logged in or the data of the current user were not fetched
   * yet.
   *
   * @returns object A <%- modelName %> instance.
   */
  public getCachedCurrent() {
    return auth.getCurrentUserData();
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#isAuthenticated
   *
   * @returns {boolean} True if the current user is authenticated (logged in).
   */
  public isAuthenticated() {
    return this.getCurrentId() != null;
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#getCurrentId
   *
   * @returns object Id of the currently logged-in user or null.
   */
  public getCurrentId() {
    return auth.getCurrentUserId();
  }
<% } -%>

  /**
   * The name of the model represented by this $resource,
   * i.e. `<%- modelName %>`.
   */
  public getModelName() {
    return <%-: modelName | q %>;
  }
}

<% } // for modelName in models -%>

<%
function getJsDocType(arg) {
  return arg.type;
}

function ngdocForMethod(modelName, methodName, action, responseModelName) {
   // always add an empty line before the ngdoc comment:
-%>

  /**
<% if (action.deprecated) { -%>
   * @deprecated <%- action.deprecated %>
<% } -%>
<% if (!action.description) {
action.description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
   * <%-: action.description | replace:/\n/g, '\n         * ' %>
<%
var params = action.accepts;
var postData;
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  params = params.filter(function(arg) {
    return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
  });
  postData = action.accepts.filter(function(arg) {
    return params.indexOf(arg) == -1;
  });
}
-%>
<% if (params.length != 0) {
  params.forEach(function(arg) { -%>
   *
   * @param <%- getJsDocType(arg)  %> <%- arg.arg %> <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   if (meta.isUser && methodName === 'login' && arg.arg === 'include') { -%>
   *   Default value: `user`.
<%   } -%>
<% }); } -%>
<% if (meta.isUser && methodName === 'login') { -%>
   *
   *  - `rememberMe` - `boolean` - Whether the authentication credentials
   *     should be remembered in localStorage across app/browser restarts.
   *     Default: `true`.
<% } -%>
<% if (postData) { -%>
   *
   * @param object data Request data.
<% if (postData.length == 0) { -%>
   *
   * This method does not accept any data. Supply an empty object.
<% } else if (postData.length == 1 && postData[0].http &&
      postData[0].http.source == 'body') { -%>
   *
   * This method expects a subset of model properties as request parameters.
<% } else {
postData.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` â `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
  }
} -%>
   *
<% var returnType = action.isReturningArray() ? 'object[]': 'object'; -%>
   * @returns <%- returnType %> An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   *
<% if (!action.returns || action.returns.length == 0) { -%>
   * This method returns no data.
<% } else if (action.returns[0].root) { -%>
<%   if (action.returns[0].description) { -%>
   * <%- action.returns[0].description
.replace(/\n/g, '\n   * ').trimRight() %>
<%   } else { -%>
   * <em>
   * (The remote method definition does not provide any description.
   * This usually means the response is a `<%- responseModelName || modelName %>` object.)
   * </em>
<%   } -%>
<% } else { -%>
   * Data properties:
<%   action.returns.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` â `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
   */
<% } // end of ngdocForMethod -%>

